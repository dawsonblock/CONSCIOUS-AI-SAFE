
# FDQC v3.1 - Production Build System

# Supports CPU (OpenMP), CUDA, and optimized SIMD builds

CXX := g++
NVCC := nvcc
PYTHON := python3

# Compiler flags

CXXFLAGS := -std=c++17 -O3 -Wall -Wextra
CXXFLAGS_FAST := $(CXXFLAGS) -march=native -mtune=native -ffast-math
CXXFLAGS_OMP := $(CXXFLAGS_FAST) -fopenmp
CXXFLAGS_DEBUG := -std=c++17 -O0 -g -Wall -Wextra -fsanitize=address

# CUDA flags

NVCCFLAGS := -std=c++17 -O3 –use_fast_math -Xcompiler -fopenmp
CUDA_ARCH := -arch=sm_75  # Adjust for your GPU (sm_75 = Turing, sm_86 = Ampere)

# Directories

SRC_DIR := src
BUILD_DIR := build
BIN_DIR := bin
DATA_DIR := data

# Targets

TARGET_CPU := $(BIN_DIR)/fdqc_validation_cpu
TARGET_CPU_OMP := $(BIN_DIR)/fdqc_validation_omp
TARGET_CUDA := $(BIN_DIR)/fdqc_validation_cuda
TARGET_DEBUG := $(BIN_DIR)/fdqc_validation_debug

.PHONY: all clean cpu cpu_omp cuda debug test benchmark help

all: cpu_omp

help:
@echo “FDQC v3.1 Build System”
@echo “”
@echo “Targets:”
@echo “  cpu         - CPU-only build (no parallelization)”
@echo “  cpu_omp     - CPU build with OpenMP (default)”
@echo “  cuda        - CUDA-accelerated build”
@echo “  debug       - Debug build with sanitizers”
@echo “  test        - Run validation tests”
@echo “  benchmark   - Run performance benchmarks”
@echo “  clean       - Remove build artifacts”

# Create directories

$(BUILD_DIR) $(BIN_DIR) $(DATA_DIR):
mkdir -p $@

# CPU build (no parallelization)

cpu: $(BUILD_DIR) $(BIN_DIR)
$(CXX) $(CXXFLAGS_FAST) fdqc_validation.cpp -o $(TARGET_CPU)
@echo “Built: $(TARGET_CPU)”

# CPU build with OpenMP

cpu_omp: $(BUILD_DIR) $(BIN_DIR)
$(CXX) $(CXXFLAGS_OMP) fdqc_validation.cpp -o $(TARGET_CPU_OMP)
@echo “Built: $(TARGET_CPU_OMP)”

# CUDA build

cuda: $(BUILD_DIR) $(