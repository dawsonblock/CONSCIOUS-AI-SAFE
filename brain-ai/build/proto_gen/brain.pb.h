// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brain_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brain_2eproto;
namespace brain {
class EmbedReq;
struct EmbedReqDefaultTypeInternal;
extern EmbedReqDefaultTypeInternal _EmbedReq_default_instance_;
class EmbedResp;
struct EmbedRespDefaultTypeInternal;
extern EmbedRespDefaultTypeInternal _EmbedResp_default_instance_;
class EmbedVector;
struct EmbedVectorDefaultTypeInternal;
extern EmbedVectorDefaultTypeInternal _EmbedVector_default_instance_;
class FilterPredicate;
struct FilterPredicateDefaultTypeInternal;
extern FilterPredicateDefaultTypeInternal _FilterPredicate_default_instance_;
class GraphStats;
struct GraphStatsDefaultTypeInternal;
extern GraphStatsDefaultTypeInternal _GraphStats_default_instance_;
class HealthReq;
struct HealthReqDefaultTypeInternal;
extern HealthReqDefaultTypeInternal _HealthReq_default_instance_;
class HealthResp;
struct HealthRespDefaultTypeInternal;
extern HealthRespDefaultTypeInternal _HealthResp_default_instance_;
class MemoryStats;
struct MemoryStatsDefaultTypeInternal;
extern MemoryStatsDefaultTypeInternal _MemoryStats_default_instance_;
class RecallReq;
struct RecallReqDefaultTypeInternal;
extern RecallReqDefaultTypeInternal _RecallReq_default_instance_;
class RecallResp;
struct RecallRespDefaultTypeInternal;
extern RecallRespDefaultTypeInternal _RecallResp_default_instance_;
class StatsReq;
struct StatsReqDefaultTypeInternal;
extern StatsReqDefaultTypeInternal _StatsReq_default_instance_;
class StatsResp;
struct StatsRespDefaultTypeInternal;
extern StatsRespDefaultTypeInternal _StatsResp_default_instance_;
class StatsResp_MetricsEntry_DoNotUse;
struct StatsResp_MetricsEntry_DoNotUseDefaultTypeInternal;
extern StatsResp_MetricsEntry_DoNotUseDefaultTypeInternal _StatsResp_MetricsEntry_DoNotUse_default_instance_;
class StepReq;
struct StepReqDefaultTypeInternal;
extern StepReqDefaultTypeInternal _StepReq_default_instance_;
class StepResp;
struct StepRespDefaultTypeInternal;
extern StepRespDefaultTypeInternal _StepResp_default_instance_;
class UpsertReq;
struct UpsertReqDefaultTypeInternal;
extern UpsertReqDefaultTypeInternal _UpsertReq_default_instance_;
class UpsertResp;
struct UpsertRespDefaultTypeInternal;
extern UpsertRespDefaultTypeInternal _UpsertResp_default_instance_;
}  // namespace brain
PROTOBUF_NAMESPACE_OPEN
template<> ::brain::EmbedReq* Arena::CreateMaybeMessage<::brain::EmbedReq>(Arena*);
template<> ::brain::EmbedResp* Arena::CreateMaybeMessage<::brain::EmbedResp>(Arena*);
template<> ::brain::EmbedVector* Arena::CreateMaybeMessage<::brain::EmbedVector>(Arena*);
template<> ::brain::FilterPredicate* Arena::CreateMaybeMessage<::brain::FilterPredicate>(Arena*);
template<> ::brain::GraphStats* Arena::CreateMaybeMessage<::brain::GraphStats>(Arena*);
template<> ::brain::HealthReq* Arena::CreateMaybeMessage<::brain::HealthReq>(Arena*);
template<> ::brain::HealthResp* Arena::CreateMaybeMessage<::brain::HealthResp>(Arena*);
template<> ::brain::MemoryStats* Arena::CreateMaybeMessage<::brain::MemoryStats>(Arena*);
template<> ::brain::RecallReq* Arena::CreateMaybeMessage<::brain::RecallReq>(Arena*);
template<> ::brain::RecallResp* Arena::CreateMaybeMessage<::brain::RecallResp>(Arena*);
template<> ::brain::StatsReq* Arena::CreateMaybeMessage<::brain::StatsReq>(Arena*);
template<> ::brain::StatsResp* Arena::CreateMaybeMessage<::brain::StatsResp>(Arena*);
template<> ::brain::StatsResp_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage<::brain::StatsResp_MetricsEntry_DoNotUse>(Arena*);
template<> ::brain::StepReq* Arena::CreateMaybeMessage<::brain::StepReq>(Arena*);
template<> ::brain::StepResp* Arena::CreateMaybeMessage<::brain::StepResp>(Arena*);
template<> ::brain::UpsertReq* Arena::CreateMaybeMessage<::brain::UpsertReq>(Arena*);
template<> ::brain::UpsertResp* Arena::CreateMaybeMessage<::brain::UpsertResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace brain {

// ===================================================================

class HealthReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:brain.HealthReq) */ {
 public:
  inline HealthReq() : HealthReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HealthReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthReq(const HealthReq& from);
  HealthReq(HealthReq&& from) noexcept
    : HealthReq() {
    *this = ::std::move(from);
  }

  inline HealthReq& operator=(const HealthReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthReq& operator=(HealthReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthReq* internal_default_instance() {
    return reinterpret_cast<const HealthReq*>(
               &_HealthReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HealthReq& a, HealthReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HealthReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HealthReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.HealthReq";
  }
  protected:
  explicit HealthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:brain.HealthReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class HealthResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.HealthResp) */ {
 public:
  inline HealthResp() : HealthResp(nullptr) {}
  ~HealthResp() override;
  explicit PROTOBUF_CONSTEXPR HealthResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthResp(const HealthResp& from);
  HealthResp(HealthResp&& from) noexcept
    : HealthResp() {
    *this = ::std::move(from);
  }

  inline HealthResp& operator=(const HealthResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthResp& operator=(HealthResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthResp* internal_default_instance() {
    return reinterpret_cast<const HealthResp*>(
               &_HealthResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HealthResp& a, HealthResp& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HealthResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HealthResp& from) {
    HealthResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.HealthResp";
  }
  protected:
  explicit HealthResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kVersionFieldNumber = 2,
    kUptimeMsFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int64 uptime_ms = 3;
  void clear_uptime_ms();
  int64_t uptime_ms() const;
  void set_uptime_ms(int64_t value);
  private:
  int64_t _internal_uptime_ms() const;
  void _internal_set_uptime_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:brain.HealthResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    int64_t uptime_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class StepReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.StepReq) */ {
 public:
  inline StepReq() : StepReq(nullptr) {}
  ~StepReq() override;
  explicit PROTOBUF_CONSTEXPR StepReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepReq(const StepReq& from);
  StepReq(StepReq&& from) noexcept
    : StepReq() {
    *this = ::std::move(from);
  }

  inline StepReq& operator=(const StepReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepReq& operator=(StepReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepReq* internal_default_instance() {
    return reinterpret_cast<const StepReq*>(
               &_StepReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StepReq& a, StepReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StepReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepReq& from) {
    StepReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.StepReq";
  }
  protected:
  explicit StepReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kContextFieldNumber = 3,
    kRewardFieldNumber = 2,
  };
  // repeated double input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  private:
  double _internal_input(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_input() const;
  void _internal_add_input(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_input();
  public:
  double input(int index) const;
  void set_input(int index, double value);
  void add_input(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_input();

  // string context = 3;
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // double reward = 2;
  void clear_reward();
  double reward() const;
  void set_reward(double value);
  private:
  double _internal_reward() const;
  void _internal_set_reward(double value);
  public:

  // @@protoc_insertion_point(class_scope:brain.StepReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > input_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
    double reward_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class StepResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.StepResp) */ {
 public:
  inline StepResp() : StepResp(nullptr) {}
  ~StepResp() override;
  explicit PROTOBUF_CONSTEXPR StepResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepResp(const StepResp& from);
  StepResp(StepResp&& from) noexcept
    : StepResp() {
    *this = ::std::move(from);
  }

  inline StepResp& operator=(const StepResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepResp& operator=(StepResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepResp* internal_default_instance() {
    return reinterpret_cast<const StepResp*>(
               &_StepResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StepResp& a, StepResp& b) {
    a.Swap(&b);
  }
  inline void Swap(StepResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepResp& from) {
    StepResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.StepResp";
  }
  protected:
  explicit StepResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQwStateFieldNumber = 3,
    kMemoryStatsFieldNumber = 4,
    kEntropyFieldNumber = 1,
    kTotalCollapsesFieldNumber = 2,
  };
  // repeated double qw_state = 3;
  int qw_state_size() const;
  private:
  int _internal_qw_state_size() const;
  public:
  void clear_qw_state();
  private:
  double _internal_qw_state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_qw_state() const;
  void _internal_add_qw_state(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_qw_state();
  public:
  double qw_state(int index) const;
  void set_qw_state(int index, double value);
  void add_qw_state(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      qw_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_qw_state();

  // .brain.MemoryStats memory_stats = 4;
  bool has_memory_stats() const;
  private:
  bool _internal_has_memory_stats() const;
  public:
  void clear_memory_stats();
  const ::brain::MemoryStats& memory_stats() const;
  PROTOBUF_NODISCARD ::brain::MemoryStats* release_memory_stats();
  ::brain::MemoryStats* mutable_memory_stats();
  void set_allocated_memory_stats(::brain::MemoryStats* memory_stats);
  private:
  const ::brain::MemoryStats& _internal_memory_stats() const;
  ::brain::MemoryStats* _internal_mutable_memory_stats();
  public:
  void unsafe_arena_set_allocated_memory_stats(
      ::brain::MemoryStats* memory_stats);
  ::brain::MemoryStats* unsafe_arena_release_memory_stats();

  // double entropy = 1;
  void clear_entropy();
  double entropy() const;
  void set_entropy(double value);
  private:
  double _internal_entropy() const;
  void _internal_set_entropy(double value);
  public:

  // int64 total_collapses = 2;
  void clear_total_collapses();
  int64_t total_collapses() const;
  void set_total_collapses(int64_t value);
  private:
  int64_t _internal_total_collapses() const;
  void _internal_set_total_collapses(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:brain.StepResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > qw_state_;
    ::brain::MemoryStats* memory_stats_;
    double entropy_;
    int64_t total_collapses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class StatsReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:brain.StatsReq) */ {
 public:
  inline StatsReq() : StatsReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StatsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsReq(const StatsReq& from);
  StatsReq(StatsReq&& from) noexcept
    : StatsReq() {
    *this = ::std::move(from);
  }

  inline StatsReq& operator=(const StatsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsReq& operator=(StatsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsReq* internal_default_instance() {
    return reinterpret_cast<const StatsReq*>(
               &_StatsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatsReq& a, StatsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StatsReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StatsReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.StatsReq";
  }
  protected:
  explicit StatsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:brain.StatsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class StatsResp_MetricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StatsResp_MetricsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StatsResp_MetricsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  StatsResp_MetricsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StatsResp_MetricsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StatsResp_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StatsResp_MetricsEntry_DoNotUse& other);
  static const StatsResp_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StatsResp_MetricsEntry_DoNotUse*>(&_StatsResp_MetricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "brain.StatsResp.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_brain_2eproto;
};

// -------------------------------------------------------------------

class StatsResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.StatsResp) */ {
 public:
  inline StatsResp() : StatsResp(nullptr) {}
  ~StatsResp() override;
  explicit PROTOBUF_CONSTEXPR StatsResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsResp(const StatsResp& from);
  StatsResp(StatsResp&& from) noexcept
    : StatsResp() {
    *this = ::std::move(from);
  }

  inline StatsResp& operator=(const StatsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsResp& operator=(StatsResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsResp* internal_default_instance() {
    return reinterpret_cast<const StatsResp*>(
               &_StatsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StatsResp& a, StatsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsResp& from) {
    StatsResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.StatsResp";
  }
  protected:
  explicit StatsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 7,
    kMemoryStatsFieldNumber = 5,
    kGraphStatsFieldNumber = 6,
    kEntropyFieldNumber = 1,
    kTotalCollapsesFieldNumber = 2,
    kPurityFieldNumber = 4,
    kDimensionFieldNumber = 3,
  };
  // map<string, double> metrics = 7;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_metrics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_metrics();

  // .brain.MemoryStats memory_stats = 5;
  bool has_memory_stats() const;
  private:
  bool _internal_has_memory_stats() const;
  public:
  void clear_memory_stats();
  const ::brain::MemoryStats& memory_stats() const;
  PROTOBUF_NODISCARD ::brain::MemoryStats* release_memory_stats();
  ::brain::MemoryStats* mutable_memory_stats();
  void set_allocated_memory_stats(::brain::MemoryStats* memory_stats);
  private:
  const ::brain::MemoryStats& _internal_memory_stats() const;
  ::brain::MemoryStats* _internal_mutable_memory_stats();
  public:
  void unsafe_arena_set_allocated_memory_stats(
      ::brain::MemoryStats* memory_stats);
  ::brain::MemoryStats* unsafe_arena_release_memory_stats();

  // .brain.GraphStats graph_stats = 6;
  bool has_graph_stats() const;
  private:
  bool _internal_has_graph_stats() const;
  public:
  void clear_graph_stats();
  const ::brain::GraphStats& graph_stats() const;
  PROTOBUF_NODISCARD ::brain::GraphStats* release_graph_stats();
  ::brain::GraphStats* mutable_graph_stats();
  void set_allocated_graph_stats(::brain::GraphStats* graph_stats);
  private:
  const ::brain::GraphStats& _internal_graph_stats() const;
  ::brain::GraphStats* _internal_mutable_graph_stats();
  public:
  void unsafe_arena_set_allocated_graph_stats(
      ::brain::GraphStats* graph_stats);
  ::brain::GraphStats* unsafe_arena_release_graph_stats();

  // double entropy = 1;
  void clear_entropy();
  double entropy() const;
  void set_entropy(double value);
  private:
  double _internal_entropy() const;
  void _internal_set_entropy(double value);
  public:

  // int64 total_collapses = 2;
  void clear_total_collapses();
  int64_t total_collapses() const;
  void set_total_collapses(int64_t value);
  private:
  int64_t _internal_total_collapses() const;
  void _internal_set_total_collapses(int64_t value);
  public:

  // double purity = 4;
  void clear_purity();
  double purity() const;
  void set_purity(double value);
  private:
  double _internal_purity() const;
  void _internal_set_purity(double value);
  public:

  // int32 dimension = 3;
  void clear_dimension();
  int32_t dimension() const;
  void set_dimension(int32_t value);
  private:
  int32_t _internal_dimension() const;
  void _internal_set_dimension(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:brain.StatsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        StatsResp_MetricsEntry_DoNotUse,
        std::string, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> metrics_;
    ::brain::MemoryStats* memory_stats_;
    ::brain::GraphStats* graph_stats_;
    double entropy_;
    int64_t total_collapses_;
    double purity_;
    int32_t dimension_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class EmbedReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.EmbedReq) */ {
 public:
  inline EmbedReq() : EmbedReq(nullptr) {}
  ~EmbedReq() override;
  explicit PROTOBUF_CONSTEXPR EmbedReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbedReq(const EmbedReq& from);
  EmbedReq(EmbedReq&& from) noexcept
    : EmbedReq() {
    *this = ::std::move(from);
  }

  inline EmbedReq& operator=(const EmbedReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedReq& operator=(EmbedReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbedReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedReq* internal_default_instance() {
    return reinterpret_cast<const EmbedReq*>(
               &_EmbedReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EmbedReq& a, EmbedReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmbedReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmbedReq& from) {
    EmbedReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.EmbedReq";
  }
  protected:
  explicit EmbedReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:brain.EmbedReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class EmbedResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.EmbedResp) */ {
 public:
  inline EmbedResp() : EmbedResp(nullptr) {}
  ~EmbedResp() override;
  explicit PROTOBUF_CONSTEXPR EmbedResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbedResp(const EmbedResp& from);
  EmbedResp(EmbedResp&& from) noexcept
    : EmbedResp() {
    *this = ::std::move(from);
  }

  inline EmbedResp& operator=(const EmbedResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedResp& operator=(EmbedResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbedResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedResp* internal_default_instance() {
    return reinterpret_cast<const EmbedResp*>(
               &_EmbedResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EmbedResp& a, EmbedResp& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmbedResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmbedResp& from) {
    EmbedResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.EmbedResp";
  }
  protected:
  explicit EmbedResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddingFieldNumber = 1,
  };
  // repeated float embedding = 1;
  int embedding_size() const;
  private:
  int _internal_embedding_size() const;
  public:
  void clear_embedding();
  private:
  float _internal_embedding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_embedding() const;
  void _internal_add_embedding(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_embedding();
  public:
  float embedding(int index) const;
  void set_embedding(int index, float value);
  void add_embedding(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      embedding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_embedding();

  // @@protoc_insertion_point(class_scope:brain.EmbedResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > embedding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class UpsertReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.UpsertReq) */ {
 public:
  inline UpsertReq() : UpsertReq(nullptr) {}
  ~UpsertReq() override;
  explicit PROTOBUF_CONSTEXPR UpsertReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpsertReq(const UpsertReq& from);
  UpsertReq(UpsertReq&& from) noexcept
    : UpsertReq() {
    *this = ::std::move(from);
  }

  inline UpsertReq& operator=(const UpsertReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpsertReq& operator=(UpsertReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpsertReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpsertReq* internal_default_instance() {
    return reinterpret_cast<const UpsertReq*>(
               &_UpsertReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpsertReq& a, UpsertReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpsertReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpsertReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpsertReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpsertReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpsertReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpsertReq& from) {
    UpsertReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpsertReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.UpsertReq";
  }
  protected:
  explicit UpsertReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kVectorsFieldNumber = 2,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated .brain.EmbedVector vectors = 2;
  int vectors_size() const;
  private:
  int _internal_vectors_size() const;
  public:
  void clear_vectors();
  ::brain::EmbedVector* mutable_vectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::EmbedVector >*
      mutable_vectors();
  private:
  const ::brain::EmbedVector& _internal_vectors(int index) const;
  ::brain::EmbedVector* _internal_add_vectors();
  public:
  const ::brain::EmbedVector& vectors(int index) const;
  ::brain::EmbedVector* add_vectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::EmbedVector >&
      vectors() const;

  // @@protoc_insertion_point(class_scope:brain.UpsertReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::EmbedVector > vectors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class EmbedVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.EmbedVector) */ {
 public:
  inline EmbedVector() : EmbedVector(nullptr) {}
  ~EmbedVector() override;
  explicit PROTOBUF_CONSTEXPR EmbedVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbedVector(const EmbedVector& from);
  EmbedVector(EmbedVector&& from) noexcept
    : EmbedVector() {
    *this = ::std::move(from);
  }

  inline EmbedVector& operator=(const EmbedVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedVector& operator=(EmbedVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbedVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedVector* internal_default_instance() {
    return reinterpret_cast<const EmbedVector*>(
               &_EmbedVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EmbedVector& a, EmbedVector& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmbedVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmbedVector& from) {
    EmbedVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.EmbedVector";
  }
  protected:
  explicit EmbedVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:brain.EmbedVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class UpsertResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.UpsertResp) */ {
 public:
  inline UpsertResp() : UpsertResp(nullptr) {}
  ~UpsertResp() override;
  explicit PROTOBUF_CONSTEXPR UpsertResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpsertResp(const UpsertResp& from);
  UpsertResp(UpsertResp&& from) noexcept
    : UpsertResp() {
    *this = ::std::move(from);
  }

  inline UpsertResp& operator=(const UpsertResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpsertResp& operator=(UpsertResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpsertResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpsertResp* internal_default_instance() {
    return reinterpret_cast<const UpsertResp*>(
               &_UpsertResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpsertResp& a, UpsertResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UpsertResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpsertResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpsertResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpsertResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpsertResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpsertResp& from) {
    UpsertResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpsertResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.UpsertResp";
  }
  protected:
  explicit UpsertResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:brain.UpsertResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class RecallReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.RecallReq) */ {
 public:
  inline RecallReq() : RecallReq(nullptr) {}
  ~RecallReq() override;
  explicit PROTOBUF_CONSTEXPR RecallReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecallReq(const RecallReq& from);
  RecallReq(RecallReq&& from) noexcept
    : RecallReq() {
    *this = ::std::move(from);
  }

  inline RecallReq& operator=(const RecallReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecallReq& operator=(RecallReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecallReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecallReq* internal_default_instance() {
    return reinterpret_cast<const RecallReq*>(
               &_RecallReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecallReq& a, RecallReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RecallReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecallReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecallReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecallReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecallReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecallReq& from) {
    RecallReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecallReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.RecallReq";
  }
  protected:
  explicit RecallReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kFiltersFieldNumber = 3,
    kTopkFieldNumber = 2,
    kUseGraphFieldNumber = 4,
  };
  // repeated float query = 1;
  int query_size() const;
  private:
  int _internal_query_size() const;
  public:
  void clear_query();
  private:
  float _internal_query(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_query() const;
  void _internal_add_query(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_query();
  public:
  float query(int index) const;
  void set_query(int index, float value);
  void add_query(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_query();

  // repeated .brain.FilterPredicate filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::brain::FilterPredicate* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::FilterPredicate >*
      mutable_filters();
  private:
  const ::brain::FilterPredicate& _internal_filters(int index) const;
  ::brain::FilterPredicate* _internal_add_filters();
  public:
  const ::brain::FilterPredicate& filters(int index) const;
  ::brain::FilterPredicate* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::FilterPredicate >&
      filters() const;

  // int32 topk = 2;
  void clear_topk();
  int32_t topk() const;
  void set_topk(int32_t value);
  private:
  int32_t _internal_topk() const;
  void _internal_set_topk(int32_t value);
  public:

  // bool use_graph = 4;
  void clear_use_graph();
  bool use_graph() const;
  void set_use_graph(bool value);
  private:
  bool _internal_use_graph() const;
  void _internal_set_use_graph(bool value);
  public:

  // @@protoc_insertion_point(class_scope:brain.RecallReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > query_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::FilterPredicate > filters_;
    int32_t topk_;
    bool use_graph_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class FilterPredicate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.FilterPredicate) */ {
 public:
  inline FilterPredicate() : FilterPredicate(nullptr) {}
  ~FilterPredicate() override;
  explicit PROTOBUF_CONSTEXPR FilterPredicate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterPredicate(const FilterPredicate& from);
  FilterPredicate(FilterPredicate&& from) noexcept
    : FilterPredicate() {
    *this = ::std::move(from);
  }

  inline FilterPredicate& operator=(const FilterPredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterPredicate& operator=(FilterPredicate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterPredicate& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterPredicate* internal_default_instance() {
    return reinterpret_cast<const FilterPredicate*>(
               &_FilterPredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FilterPredicate& a, FilterPredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterPredicate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterPredicate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterPredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterPredicate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilterPredicate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FilterPredicate& from) {
    FilterPredicate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterPredicate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.FilterPredicate";
  }
  protected:
  explicit FilterPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kOpFieldNumber = 2,
    kValueTextFieldNumber = 3,
    kValueNumFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string op = 2;
  void clear_op();
  const std::string& op() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_op(ArgT0&& arg0, ArgT... args);
  std::string* mutable_op();
  PROTOBUF_NODISCARD std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // string value_text = 3;
  void clear_value_text();
  const std::string& value_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_text();
  PROTOBUF_NODISCARD std::string* release_value_text();
  void set_allocated_value_text(std::string* value_text);
  private:
  const std::string& _internal_value_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_text(const std::string& value);
  std::string* _internal_mutable_value_text();
  public:

  // double value_num = 4;
  void clear_value_num();
  double value_num() const;
  void set_value_num(double value);
  private:
  double _internal_value_num() const;
  void _internal_set_value_num(double value);
  public:

  // @@protoc_insertion_point(class_scope:brain.FilterPredicate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_text_;
    double value_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class RecallResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.RecallResp) */ {
 public:
  inline RecallResp() : RecallResp(nullptr) {}
  ~RecallResp() override;
  explicit PROTOBUF_CONSTEXPR RecallResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecallResp(const RecallResp& from);
  RecallResp(RecallResp&& from) noexcept
    : RecallResp() {
    *this = ::std::move(from);
  }

  inline RecallResp& operator=(const RecallResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecallResp& operator=(RecallResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecallResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecallResp* internal_default_instance() {
    return reinterpret_cast<const RecallResp*>(
               &_RecallResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RecallResp& a, RecallResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RecallResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecallResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecallResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecallResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecallResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecallResp& from) {
    RecallResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecallResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.RecallResp";
  }
  protected:
  explicit RecallResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kDistancesFieldNumber = 2,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated float distances = 2;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  private:
  float _internal_distances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_distances() const;
  void _internal_add_distances(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_distances();
  public:
  float distances(int index) const;
  void set_distances(int index, float value);
  void add_distances(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      distances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_distances();

  // @@protoc_insertion_point(class_scope:brain.RecallResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > distances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class MemoryStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.MemoryStats) */ {
 public:
  inline MemoryStats() : MemoryStats(nullptr) {}
  ~MemoryStats() override;
  explicit PROTOBUF_CONSTEXPR MemoryStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryStats(const MemoryStats& from);
  MemoryStats(MemoryStats&& from) noexcept
    : MemoryStats() {
    *this = ::std::move(from);
  }

  inline MemoryStats& operator=(const MemoryStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryStats& operator=(MemoryStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryStats* internal_default_instance() {
    return reinterpret_cast<const MemoryStats*>(
               &_MemoryStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MemoryStats& a, MemoryStats& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemoryStats& from) {
    MemoryStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.MemoryStats";
  }
  protected:
  explicit MemoryStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalItemsFieldNumber = 1,
    kHotItemsFieldNumber = 2,
    kWarmItemsFieldNumber = 3,
    kColdItemsFieldNumber = 4,
  };
  // int64 total_items = 1;
  void clear_total_items();
  int64_t total_items() const;
  void set_total_items(int64_t value);
  private:
  int64_t _internal_total_items() const;
  void _internal_set_total_items(int64_t value);
  public:

  // int64 hot_items = 2;
  void clear_hot_items();
  int64_t hot_items() const;
  void set_hot_items(int64_t value);
  private:
  int64_t _internal_hot_items() const;
  void _internal_set_hot_items(int64_t value);
  public:

  // int64 warm_items = 3;
  void clear_warm_items();
  int64_t warm_items() const;
  void set_warm_items(int64_t value);
  private:
  int64_t _internal_warm_items() const;
  void _internal_set_warm_items(int64_t value);
  public:

  // int64 cold_items = 4;
  void clear_cold_items();
  int64_t cold_items() const;
  void set_cold_items(int64_t value);
  private:
  int64_t _internal_cold_items() const;
  void _internal_set_cold_items(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:brain.MemoryStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t total_items_;
    int64_t hot_items_;
    int64_t warm_items_;
    int64_t cold_items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// -------------------------------------------------------------------

class GraphStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brain.GraphStats) */ {
 public:
  inline GraphStats() : GraphStats(nullptr) {}
  ~GraphStats() override;
  explicit PROTOBUF_CONSTEXPR GraphStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphStats(const GraphStats& from);
  GraphStats(GraphStats&& from) noexcept
    : GraphStats() {
    *this = ::std::move(from);
  }

  inline GraphStats& operator=(const GraphStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphStats& operator=(GraphStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphStats* internal_default_instance() {
    return reinterpret_cast<const GraphStats*>(
               &_GraphStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GraphStats& a, GraphStats& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GraphStats& from) {
    GraphStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brain.GraphStats";
  }
  protected:
  explicit GraphStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kEdgesFieldNumber = 2,
    kAvgDegreeFieldNumber = 3,
  };
  // int64 nodes = 1;
  void clear_nodes();
  int64_t nodes() const;
  void set_nodes(int64_t value);
  private:
  int64_t _internal_nodes() const;
  void _internal_set_nodes(int64_t value);
  public:

  // int64 edges = 2;
  void clear_edges();
  int64_t edges() const;
  void set_edges(int64_t value);
  private:
  int64_t _internal_edges() const;
  void _internal_set_edges(int64_t value);
  public:

  // double avg_degree = 3;
  void clear_avg_degree();
  double avg_degree() const;
  void set_avg_degree(double value);
  private:
  double _internal_avg_degree() const;
  void _internal_set_avg_degree(double value);
  public:

  // @@protoc_insertion_point(class_scope:brain.GraphStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t nodes_;
    int64_t edges_;
    double avg_degree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthReq

// -------------------------------------------------------------------

// HealthResp

// string status = 1;
inline void HealthResp::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& HealthResp::status() const {
  // @@protoc_insertion_point(field_get:brain.HealthResp.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HealthResp::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brain.HealthResp.status)
}
inline std::string* HealthResp::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:brain.HealthResp.status)
  return _s;
}
inline const std::string& HealthResp::_internal_status() const {
  return _impl_.status_.Get();
}
inline void HealthResp::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* HealthResp::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* HealthResp::release_status() {
  // @@protoc_insertion_point(field_release:brain.HealthResp.status)
  return _impl_.status_.Release();
}
inline void HealthResp::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brain.HealthResp.status)
}

// string version = 2;
inline void HealthResp::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& HealthResp::version() const {
  // @@protoc_insertion_point(field_get:brain.HealthResp.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HealthResp::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brain.HealthResp.version)
}
inline std::string* HealthResp::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:brain.HealthResp.version)
  return _s;
}
inline const std::string& HealthResp::_internal_version() const {
  return _impl_.version_.Get();
}
inline void HealthResp::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* HealthResp::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* HealthResp::release_version() {
  // @@protoc_insertion_point(field_release:brain.HealthResp.version)
  return _impl_.version_.Release();
}
inline void HealthResp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brain.HealthResp.version)
}

// int64 uptime_ms = 3;
inline void HealthResp::clear_uptime_ms() {
  _impl_.uptime_ms_ = int64_t{0};
}
inline int64_t HealthResp::_internal_uptime_ms() const {
  return _impl_.uptime_ms_;
}
inline int64_t HealthResp::uptime_ms() const {
  // @@protoc_insertion_point(field_get:brain.HealthResp.uptime_ms)
  return _internal_uptime_ms();
}
inline void HealthResp::_internal_set_uptime_ms(int64_t value) {
  
  _impl_.uptime_ms_ = value;
}
inline void HealthResp::set_uptime_ms(int64_t value) {
  _internal_set_uptime_ms(value);
  // @@protoc_insertion_point(field_set:brain.HealthResp.uptime_ms)
}

// -------------------------------------------------------------------

// StepReq

// repeated double input = 1;
inline int StepReq::_internal_input_size() const {
  return _impl_.input_.size();
}
inline int StepReq::input_size() const {
  return _internal_input_size();
}
inline void StepReq::clear_input() {
  _impl_.input_.Clear();
}
inline double StepReq::_internal_input(int index) const {
  return _impl_.input_.Get(index);
}
inline double StepReq::input(int index) const {
  // @@protoc_insertion_point(field_get:brain.StepReq.input)
  return _internal_input(index);
}
inline void StepReq::set_input(int index, double value) {
  _impl_.input_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.StepReq.input)
}
inline void StepReq::_internal_add_input(double value) {
  _impl_.input_.Add(value);
}
inline void StepReq::add_input(double value) {
  _internal_add_input(value);
  // @@protoc_insertion_point(field_add:brain.StepReq.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StepReq::_internal_input() const {
  return _impl_.input_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StepReq::input() const {
  // @@protoc_insertion_point(field_list:brain.StepReq.input)
  return _internal_input();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StepReq::_internal_mutable_input() {
  return &_impl_.input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StepReq::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:brain.StepReq.input)
  return _internal_mutable_input();
}

// double reward = 2;
inline void StepReq::clear_reward() {
  _impl_.reward_ = 0;
}
inline double StepReq::_internal_reward() const {
  return _impl_.reward_;
}
inline double StepReq::reward() const {
  // @@protoc_insertion_point(field_get:brain.StepReq.reward)
  return _internal_reward();
}
inline void StepReq::_internal_set_reward(double value) {
  
  _impl_.reward_ = value;
}
inline void StepReq::set_reward(double value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:brain.StepReq.reward)
}

// string context = 3;
inline void StepReq::clear_context() {
  _impl_.context_.ClearToEmpty();
}
inline const std::string& StepReq::context() const {
  // @@protoc_insertion_point(field_get:brain.StepReq.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepReq::set_context(ArgT0&& arg0, ArgT... args) {
 
 _impl_.context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brain.StepReq.context)
}
inline std::string* StepReq::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:brain.StepReq.context)
  return _s;
}
inline const std::string& StepReq::_internal_context() const {
  return _impl_.context_.Get();
}
inline void StepReq::_internal_set_context(const std::string& value) {
  
  _impl_.context_.Set(value, GetArenaForAllocation());
}
inline std::string* StepReq::_internal_mutable_context() {
  
  return _impl_.context_.Mutable(GetArenaForAllocation());
}
inline std::string* StepReq::release_context() {
  // @@protoc_insertion_point(field_release:brain.StepReq.context)
  return _impl_.context_.Release();
}
inline void StepReq::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  _impl_.context_.SetAllocated(context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brain.StepReq.context)
}

// -------------------------------------------------------------------

// StepResp

// double entropy = 1;
inline void StepResp::clear_entropy() {
  _impl_.entropy_ = 0;
}
inline double StepResp::_internal_entropy() const {
  return _impl_.entropy_;
}
inline double StepResp::entropy() const {
  // @@protoc_insertion_point(field_get:brain.StepResp.entropy)
  return _internal_entropy();
}
inline void StepResp::_internal_set_entropy(double value) {
  
  _impl_.entropy_ = value;
}
inline void StepResp::set_entropy(double value) {
  _internal_set_entropy(value);
  // @@protoc_insertion_point(field_set:brain.StepResp.entropy)
}

// int64 total_collapses = 2;
inline void StepResp::clear_total_collapses() {
  _impl_.total_collapses_ = int64_t{0};
}
inline int64_t StepResp::_internal_total_collapses() const {
  return _impl_.total_collapses_;
}
inline int64_t StepResp::total_collapses() const {
  // @@protoc_insertion_point(field_get:brain.StepResp.total_collapses)
  return _internal_total_collapses();
}
inline void StepResp::_internal_set_total_collapses(int64_t value) {
  
  _impl_.total_collapses_ = value;
}
inline void StepResp::set_total_collapses(int64_t value) {
  _internal_set_total_collapses(value);
  // @@protoc_insertion_point(field_set:brain.StepResp.total_collapses)
}

// repeated double qw_state = 3;
inline int StepResp::_internal_qw_state_size() const {
  return _impl_.qw_state_.size();
}
inline int StepResp::qw_state_size() const {
  return _internal_qw_state_size();
}
inline void StepResp::clear_qw_state() {
  _impl_.qw_state_.Clear();
}
inline double StepResp::_internal_qw_state(int index) const {
  return _impl_.qw_state_.Get(index);
}
inline double StepResp::qw_state(int index) const {
  // @@protoc_insertion_point(field_get:brain.StepResp.qw_state)
  return _internal_qw_state(index);
}
inline void StepResp::set_qw_state(int index, double value) {
  _impl_.qw_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.StepResp.qw_state)
}
inline void StepResp::_internal_add_qw_state(double value) {
  _impl_.qw_state_.Add(value);
}
inline void StepResp::add_qw_state(double value) {
  _internal_add_qw_state(value);
  // @@protoc_insertion_point(field_add:brain.StepResp.qw_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StepResp::_internal_qw_state() const {
  return _impl_.qw_state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StepResp::qw_state() const {
  // @@protoc_insertion_point(field_list:brain.StepResp.qw_state)
  return _internal_qw_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StepResp::_internal_mutable_qw_state() {
  return &_impl_.qw_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StepResp::mutable_qw_state() {
  // @@protoc_insertion_point(field_mutable_list:brain.StepResp.qw_state)
  return _internal_mutable_qw_state();
}

// .brain.MemoryStats memory_stats = 4;
inline bool StepResp::_internal_has_memory_stats() const {
  return this != internal_default_instance() && _impl_.memory_stats_ != nullptr;
}
inline bool StepResp::has_memory_stats() const {
  return _internal_has_memory_stats();
}
inline void StepResp::clear_memory_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.memory_stats_ != nullptr) {
    delete _impl_.memory_stats_;
  }
  _impl_.memory_stats_ = nullptr;
}
inline const ::brain::MemoryStats& StepResp::_internal_memory_stats() const {
  const ::brain::MemoryStats* p = _impl_.memory_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::brain::MemoryStats&>(
      ::brain::_MemoryStats_default_instance_);
}
inline const ::brain::MemoryStats& StepResp::memory_stats() const {
  // @@protoc_insertion_point(field_get:brain.StepResp.memory_stats)
  return _internal_memory_stats();
}
inline void StepResp::unsafe_arena_set_allocated_memory_stats(
    ::brain::MemoryStats* memory_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memory_stats_);
  }
  _impl_.memory_stats_ = memory_stats;
  if (memory_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brain.StepResp.memory_stats)
}
inline ::brain::MemoryStats* StepResp::release_memory_stats() {
  
  ::brain::MemoryStats* temp = _impl_.memory_stats_;
  _impl_.memory_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brain::MemoryStats* StepResp::unsafe_arena_release_memory_stats() {
  // @@protoc_insertion_point(field_release:brain.StepResp.memory_stats)
  
  ::brain::MemoryStats* temp = _impl_.memory_stats_;
  _impl_.memory_stats_ = nullptr;
  return temp;
}
inline ::brain::MemoryStats* StepResp::_internal_mutable_memory_stats() {
  
  if (_impl_.memory_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::brain::MemoryStats>(GetArenaForAllocation());
    _impl_.memory_stats_ = p;
  }
  return _impl_.memory_stats_;
}
inline ::brain::MemoryStats* StepResp::mutable_memory_stats() {
  ::brain::MemoryStats* _msg = _internal_mutable_memory_stats();
  // @@protoc_insertion_point(field_mutable:brain.StepResp.memory_stats)
  return _msg;
}
inline void StepResp::set_allocated_memory_stats(::brain::MemoryStats* memory_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.memory_stats_;
  }
  if (memory_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(memory_stats);
    if (message_arena != submessage_arena) {
      memory_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.memory_stats_ = memory_stats;
  // @@protoc_insertion_point(field_set_allocated:brain.StepResp.memory_stats)
}

// -------------------------------------------------------------------

// StatsReq

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StatsResp

// double entropy = 1;
inline void StatsResp::clear_entropy() {
  _impl_.entropy_ = 0;
}
inline double StatsResp::_internal_entropy() const {
  return _impl_.entropy_;
}
inline double StatsResp::entropy() const {
  // @@protoc_insertion_point(field_get:brain.StatsResp.entropy)
  return _internal_entropy();
}
inline void StatsResp::_internal_set_entropy(double value) {
  
  _impl_.entropy_ = value;
}
inline void StatsResp::set_entropy(double value) {
  _internal_set_entropy(value);
  // @@protoc_insertion_point(field_set:brain.StatsResp.entropy)
}

// int64 total_collapses = 2;
inline void StatsResp::clear_total_collapses() {
  _impl_.total_collapses_ = int64_t{0};
}
inline int64_t StatsResp::_internal_total_collapses() const {
  return _impl_.total_collapses_;
}
inline int64_t StatsResp::total_collapses() const {
  // @@protoc_insertion_point(field_get:brain.StatsResp.total_collapses)
  return _internal_total_collapses();
}
inline void StatsResp::_internal_set_total_collapses(int64_t value) {
  
  _impl_.total_collapses_ = value;
}
inline void StatsResp::set_total_collapses(int64_t value) {
  _internal_set_total_collapses(value);
  // @@protoc_insertion_point(field_set:brain.StatsResp.total_collapses)
}

// int32 dimension = 3;
inline void StatsResp::clear_dimension() {
  _impl_.dimension_ = 0;
}
inline int32_t StatsResp::_internal_dimension() const {
  return _impl_.dimension_;
}
inline int32_t StatsResp::dimension() const {
  // @@protoc_insertion_point(field_get:brain.StatsResp.dimension)
  return _internal_dimension();
}
inline void StatsResp::_internal_set_dimension(int32_t value) {
  
  _impl_.dimension_ = value;
}
inline void StatsResp::set_dimension(int32_t value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:brain.StatsResp.dimension)
}

// double purity = 4;
inline void StatsResp::clear_purity() {
  _impl_.purity_ = 0;
}
inline double StatsResp::_internal_purity() const {
  return _impl_.purity_;
}
inline double StatsResp::purity() const {
  // @@protoc_insertion_point(field_get:brain.StatsResp.purity)
  return _internal_purity();
}
inline void StatsResp::_internal_set_purity(double value) {
  
  _impl_.purity_ = value;
}
inline void StatsResp::set_purity(double value) {
  _internal_set_purity(value);
  // @@protoc_insertion_point(field_set:brain.StatsResp.purity)
}

// .brain.MemoryStats memory_stats = 5;
inline bool StatsResp::_internal_has_memory_stats() const {
  return this != internal_default_instance() && _impl_.memory_stats_ != nullptr;
}
inline bool StatsResp::has_memory_stats() const {
  return _internal_has_memory_stats();
}
inline void StatsResp::clear_memory_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.memory_stats_ != nullptr) {
    delete _impl_.memory_stats_;
  }
  _impl_.memory_stats_ = nullptr;
}
inline const ::brain::MemoryStats& StatsResp::_internal_memory_stats() const {
  const ::brain::MemoryStats* p = _impl_.memory_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::brain::MemoryStats&>(
      ::brain::_MemoryStats_default_instance_);
}
inline const ::brain::MemoryStats& StatsResp::memory_stats() const {
  // @@protoc_insertion_point(field_get:brain.StatsResp.memory_stats)
  return _internal_memory_stats();
}
inline void StatsResp::unsafe_arena_set_allocated_memory_stats(
    ::brain::MemoryStats* memory_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memory_stats_);
  }
  _impl_.memory_stats_ = memory_stats;
  if (memory_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brain.StatsResp.memory_stats)
}
inline ::brain::MemoryStats* StatsResp::release_memory_stats() {
  
  ::brain::MemoryStats* temp = _impl_.memory_stats_;
  _impl_.memory_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brain::MemoryStats* StatsResp::unsafe_arena_release_memory_stats() {
  // @@protoc_insertion_point(field_release:brain.StatsResp.memory_stats)
  
  ::brain::MemoryStats* temp = _impl_.memory_stats_;
  _impl_.memory_stats_ = nullptr;
  return temp;
}
inline ::brain::MemoryStats* StatsResp::_internal_mutable_memory_stats() {
  
  if (_impl_.memory_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::brain::MemoryStats>(GetArenaForAllocation());
    _impl_.memory_stats_ = p;
  }
  return _impl_.memory_stats_;
}
inline ::brain::MemoryStats* StatsResp::mutable_memory_stats() {
  ::brain::MemoryStats* _msg = _internal_mutable_memory_stats();
  // @@protoc_insertion_point(field_mutable:brain.StatsResp.memory_stats)
  return _msg;
}
inline void StatsResp::set_allocated_memory_stats(::brain::MemoryStats* memory_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.memory_stats_;
  }
  if (memory_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(memory_stats);
    if (message_arena != submessage_arena) {
      memory_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.memory_stats_ = memory_stats;
  // @@protoc_insertion_point(field_set_allocated:brain.StatsResp.memory_stats)
}

// .brain.GraphStats graph_stats = 6;
inline bool StatsResp::_internal_has_graph_stats() const {
  return this != internal_default_instance() && _impl_.graph_stats_ != nullptr;
}
inline bool StatsResp::has_graph_stats() const {
  return _internal_has_graph_stats();
}
inline void StatsResp::clear_graph_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_stats_ != nullptr) {
    delete _impl_.graph_stats_;
  }
  _impl_.graph_stats_ = nullptr;
}
inline const ::brain::GraphStats& StatsResp::_internal_graph_stats() const {
  const ::brain::GraphStats* p = _impl_.graph_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::brain::GraphStats&>(
      ::brain::_GraphStats_default_instance_);
}
inline const ::brain::GraphStats& StatsResp::graph_stats() const {
  // @@protoc_insertion_point(field_get:brain.StatsResp.graph_stats)
  return _internal_graph_stats();
}
inline void StatsResp::unsafe_arena_set_allocated_graph_stats(
    ::brain::GraphStats* graph_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_stats_);
  }
  _impl_.graph_stats_ = graph_stats;
  if (graph_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brain.StatsResp.graph_stats)
}
inline ::brain::GraphStats* StatsResp::release_graph_stats() {
  
  ::brain::GraphStats* temp = _impl_.graph_stats_;
  _impl_.graph_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brain::GraphStats* StatsResp::unsafe_arena_release_graph_stats() {
  // @@protoc_insertion_point(field_release:brain.StatsResp.graph_stats)
  
  ::brain::GraphStats* temp = _impl_.graph_stats_;
  _impl_.graph_stats_ = nullptr;
  return temp;
}
inline ::brain::GraphStats* StatsResp::_internal_mutable_graph_stats() {
  
  if (_impl_.graph_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::brain::GraphStats>(GetArenaForAllocation());
    _impl_.graph_stats_ = p;
  }
  return _impl_.graph_stats_;
}
inline ::brain::GraphStats* StatsResp::mutable_graph_stats() {
  ::brain::GraphStats* _msg = _internal_mutable_graph_stats();
  // @@protoc_insertion_point(field_mutable:brain.StatsResp.graph_stats)
  return _msg;
}
inline void StatsResp::set_allocated_graph_stats(::brain::GraphStats* graph_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.graph_stats_;
  }
  if (graph_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph_stats);
    if (message_arena != submessage_arena) {
      graph_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_stats_ = graph_stats;
  // @@protoc_insertion_point(field_set_allocated:brain.StatsResp.graph_stats)
}

// map<string, double> metrics = 7;
inline int StatsResp::_internal_metrics_size() const {
  return _impl_.metrics_.size();
}
inline int StatsResp::metrics_size() const {
  return _internal_metrics_size();
}
inline void StatsResp::clear_metrics() {
  _impl_.metrics_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
StatsResp::_internal_metrics() const {
  return _impl_.metrics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
StatsResp::metrics() const {
  // @@protoc_insertion_point(field_map:brain.StatsResp.metrics)
  return _internal_metrics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
StatsResp::_internal_mutable_metrics() {
  return _impl_.metrics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
StatsResp::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:brain.StatsResp.metrics)
  return _internal_mutable_metrics();
}

// -------------------------------------------------------------------

// EmbedReq

// string text = 1;
inline void EmbedReq::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& EmbedReq::text() const {
  // @@protoc_insertion_point(field_get:brain.EmbedReq.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmbedReq::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brain.EmbedReq.text)
}
inline std::string* EmbedReq::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:brain.EmbedReq.text)
  return _s;
}
inline const std::string& EmbedReq::_internal_text() const {
  return _impl_.text_.Get();
}
inline void EmbedReq::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* EmbedReq::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* EmbedReq::release_text() {
  // @@protoc_insertion_point(field_release:brain.EmbedReq.text)
  return _impl_.text_.Release();
}
inline void EmbedReq::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brain.EmbedReq.text)
}

// -------------------------------------------------------------------

// EmbedResp

// repeated float embedding = 1;
inline int EmbedResp::_internal_embedding_size() const {
  return _impl_.embedding_.size();
}
inline int EmbedResp::embedding_size() const {
  return _internal_embedding_size();
}
inline void EmbedResp::clear_embedding() {
  _impl_.embedding_.Clear();
}
inline float EmbedResp::_internal_embedding(int index) const {
  return _impl_.embedding_.Get(index);
}
inline float EmbedResp::embedding(int index) const {
  // @@protoc_insertion_point(field_get:brain.EmbedResp.embedding)
  return _internal_embedding(index);
}
inline void EmbedResp::set_embedding(int index, float value) {
  _impl_.embedding_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.EmbedResp.embedding)
}
inline void EmbedResp::_internal_add_embedding(float value) {
  _impl_.embedding_.Add(value);
}
inline void EmbedResp::add_embedding(float value) {
  _internal_add_embedding(value);
  // @@protoc_insertion_point(field_add:brain.EmbedResp.embedding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbedResp::_internal_embedding() const {
  return _impl_.embedding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbedResp::embedding() const {
  // @@protoc_insertion_point(field_list:brain.EmbedResp.embedding)
  return _internal_embedding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbedResp::_internal_mutable_embedding() {
  return &_impl_.embedding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbedResp::mutable_embedding() {
  // @@protoc_insertion_point(field_mutable_list:brain.EmbedResp.embedding)
  return _internal_mutable_embedding();
}

// -------------------------------------------------------------------

// UpsertReq

// repeated int64 ids = 1;
inline int UpsertReq::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int UpsertReq::ids_size() const {
  return _internal_ids_size();
}
inline void UpsertReq::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t UpsertReq::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t UpsertReq::ids(int index) const {
  // @@protoc_insertion_point(field_get:brain.UpsertReq.ids)
  return _internal_ids(index);
}
inline void UpsertReq::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.UpsertReq.ids)
}
inline void UpsertReq::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void UpsertReq::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:brain.UpsertReq.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UpsertReq::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UpsertReq::ids() const {
  // @@protoc_insertion_point(field_list:brain.UpsertReq.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UpsertReq::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UpsertReq::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:brain.UpsertReq.ids)
  return _internal_mutable_ids();
}

// repeated .brain.EmbedVector vectors = 2;
inline int UpsertReq::_internal_vectors_size() const {
  return _impl_.vectors_.size();
}
inline int UpsertReq::vectors_size() const {
  return _internal_vectors_size();
}
inline void UpsertReq::clear_vectors() {
  _impl_.vectors_.Clear();
}
inline ::brain::EmbedVector* UpsertReq::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:brain.UpsertReq.vectors)
  return _impl_.vectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::EmbedVector >*
UpsertReq::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:brain.UpsertReq.vectors)
  return &_impl_.vectors_;
}
inline const ::brain::EmbedVector& UpsertReq::_internal_vectors(int index) const {
  return _impl_.vectors_.Get(index);
}
inline const ::brain::EmbedVector& UpsertReq::vectors(int index) const {
  // @@protoc_insertion_point(field_get:brain.UpsertReq.vectors)
  return _internal_vectors(index);
}
inline ::brain::EmbedVector* UpsertReq::_internal_add_vectors() {
  return _impl_.vectors_.Add();
}
inline ::brain::EmbedVector* UpsertReq::add_vectors() {
  ::brain::EmbedVector* _add = _internal_add_vectors();
  // @@protoc_insertion_point(field_add:brain.UpsertReq.vectors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::EmbedVector >&
UpsertReq::vectors() const {
  // @@protoc_insertion_point(field_list:brain.UpsertReq.vectors)
  return _impl_.vectors_;
}

// -------------------------------------------------------------------

// EmbedVector

// repeated float data = 1;
inline int EmbedVector::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int EmbedVector::data_size() const {
  return _internal_data_size();
}
inline void EmbedVector::clear_data() {
  _impl_.data_.Clear();
}
inline float EmbedVector::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline float EmbedVector::data(int index) const {
  // @@protoc_insertion_point(field_get:brain.EmbedVector.data)
  return _internal_data(index);
}
inline void EmbedVector::set_data(int index, float value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.EmbedVector.data)
}
inline void EmbedVector::_internal_add_data(float value) {
  _impl_.data_.Add(value);
}
inline void EmbedVector::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:brain.EmbedVector.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbedVector::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbedVector::data() const {
  // @@protoc_insertion_point(field_list:brain.EmbedVector.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbedVector::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbedVector::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:brain.EmbedVector.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// UpsertResp

// int32 count = 1;
inline void UpsertResp::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t UpsertResp::_internal_count() const {
  return _impl_.count_;
}
inline int32_t UpsertResp::count() const {
  // @@protoc_insertion_point(field_get:brain.UpsertResp.count)
  return _internal_count();
}
inline void UpsertResp::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void UpsertResp::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:brain.UpsertResp.count)
}

// -------------------------------------------------------------------

// RecallReq

// repeated float query = 1;
inline int RecallReq::_internal_query_size() const {
  return _impl_.query_.size();
}
inline int RecallReq::query_size() const {
  return _internal_query_size();
}
inline void RecallReq::clear_query() {
  _impl_.query_.Clear();
}
inline float RecallReq::_internal_query(int index) const {
  return _impl_.query_.Get(index);
}
inline float RecallReq::query(int index) const {
  // @@protoc_insertion_point(field_get:brain.RecallReq.query)
  return _internal_query(index);
}
inline void RecallReq::set_query(int index, float value) {
  _impl_.query_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.RecallReq.query)
}
inline void RecallReq::_internal_add_query(float value) {
  _impl_.query_.Add(value);
}
inline void RecallReq::add_query(float value) {
  _internal_add_query(value);
  // @@protoc_insertion_point(field_add:brain.RecallReq.query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecallReq::_internal_query() const {
  return _impl_.query_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecallReq::query() const {
  // @@protoc_insertion_point(field_list:brain.RecallReq.query)
  return _internal_query();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecallReq::_internal_mutable_query() {
  return &_impl_.query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecallReq::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:brain.RecallReq.query)
  return _internal_mutable_query();
}

// int32 topk = 2;
inline void RecallReq::clear_topk() {
  _impl_.topk_ = 0;
}
inline int32_t RecallReq::_internal_topk() const {
  return _impl_.topk_;
}
inline int32_t RecallReq::topk() const {
  // @@protoc_insertion_point(field_get:brain.RecallReq.topk)
  return _internal_topk();
}
inline void RecallReq::_internal_set_topk(int32_t value) {
  
  _impl_.topk_ = value;
}
inline void RecallReq::set_topk(int32_t value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:brain.RecallReq.topk)
}

// repeated .brain.FilterPredicate filters = 3;
inline int RecallReq::_internal_filters_size() const {
  return _impl_.filters_.size();
}
inline int RecallReq::filters_size() const {
  return _internal_filters_size();
}
inline void RecallReq::clear_filters() {
  _impl_.filters_.Clear();
}
inline ::brain::FilterPredicate* RecallReq::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:brain.RecallReq.filters)
  return _impl_.filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::FilterPredicate >*
RecallReq::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:brain.RecallReq.filters)
  return &_impl_.filters_;
}
inline const ::brain::FilterPredicate& RecallReq::_internal_filters(int index) const {
  return _impl_.filters_.Get(index);
}
inline const ::brain::FilterPredicate& RecallReq::filters(int index) const {
  // @@protoc_insertion_point(field_get:brain.RecallReq.filters)
  return _internal_filters(index);
}
inline ::brain::FilterPredicate* RecallReq::_internal_add_filters() {
  return _impl_.filters_.Add();
}
inline ::brain::FilterPredicate* RecallReq::add_filters() {
  ::brain::FilterPredicate* _add = _internal_add_filters();
  // @@protoc_insertion_point(field_add:brain.RecallReq.filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::brain::FilterPredicate >&
RecallReq::filters() const {
  // @@protoc_insertion_point(field_list:brain.RecallReq.filters)
  return _impl_.filters_;
}

// bool use_graph = 4;
inline void RecallReq::clear_use_graph() {
  _impl_.use_graph_ = false;
}
inline bool RecallReq::_internal_use_graph() const {
  return _impl_.use_graph_;
}
inline bool RecallReq::use_graph() const {
  // @@protoc_insertion_point(field_get:brain.RecallReq.use_graph)
  return _internal_use_graph();
}
inline void RecallReq::_internal_set_use_graph(bool value) {
  
  _impl_.use_graph_ = value;
}
inline void RecallReq::set_use_graph(bool value) {
  _internal_set_use_graph(value);
  // @@protoc_insertion_point(field_set:brain.RecallReq.use_graph)
}

// -------------------------------------------------------------------

// FilterPredicate

// string key = 1;
inline void FilterPredicate::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& FilterPredicate::key() const {
  // @@protoc_insertion_point(field_get:brain.FilterPredicate.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilterPredicate::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brain.FilterPredicate.key)
}
inline std::string* FilterPredicate::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:brain.FilterPredicate.key)
  return _s;
}
inline const std::string& FilterPredicate::_internal_key() const {
  return _impl_.key_.Get();
}
inline void FilterPredicate::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* FilterPredicate::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* FilterPredicate::release_key() {
  // @@protoc_insertion_point(field_release:brain.FilterPredicate.key)
  return _impl_.key_.Release();
}
inline void FilterPredicate::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brain.FilterPredicate.key)
}

// string op = 2;
inline void FilterPredicate::clear_op() {
  _impl_.op_.ClearToEmpty();
}
inline const std::string& FilterPredicate::op() const {
  // @@protoc_insertion_point(field_get:brain.FilterPredicate.op)
  return _internal_op();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilterPredicate::set_op(ArgT0&& arg0, ArgT... args) {
 
 _impl_.op_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brain.FilterPredicate.op)
}
inline std::string* FilterPredicate::mutable_op() {
  std::string* _s = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:brain.FilterPredicate.op)
  return _s;
}
inline const std::string& FilterPredicate::_internal_op() const {
  return _impl_.op_.Get();
}
inline void FilterPredicate::_internal_set_op(const std::string& value) {
  
  _impl_.op_.Set(value, GetArenaForAllocation());
}
inline std::string* FilterPredicate::_internal_mutable_op() {
  
  return _impl_.op_.Mutable(GetArenaForAllocation());
}
inline std::string* FilterPredicate::release_op() {
  // @@protoc_insertion_point(field_release:brain.FilterPredicate.op)
  return _impl_.op_.Release();
}
inline void FilterPredicate::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  _impl_.op_.SetAllocated(op, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.op_.IsDefault()) {
    _impl_.op_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brain.FilterPredicate.op)
}

// string value_text = 3;
inline void FilterPredicate::clear_value_text() {
  _impl_.value_text_.ClearToEmpty();
}
inline const std::string& FilterPredicate::value_text() const {
  // @@protoc_insertion_point(field_get:brain.FilterPredicate.value_text)
  return _internal_value_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilterPredicate::set_value_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brain.FilterPredicate.value_text)
}
inline std::string* FilterPredicate::mutable_value_text() {
  std::string* _s = _internal_mutable_value_text();
  // @@protoc_insertion_point(field_mutable:brain.FilterPredicate.value_text)
  return _s;
}
inline const std::string& FilterPredicate::_internal_value_text() const {
  return _impl_.value_text_.Get();
}
inline void FilterPredicate::_internal_set_value_text(const std::string& value) {
  
  _impl_.value_text_.Set(value, GetArenaForAllocation());
}
inline std::string* FilterPredicate::_internal_mutable_value_text() {
  
  return _impl_.value_text_.Mutable(GetArenaForAllocation());
}
inline std::string* FilterPredicate::release_value_text() {
  // @@protoc_insertion_point(field_release:brain.FilterPredicate.value_text)
  return _impl_.value_text_.Release();
}
inline void FilterPredicate::set_allocated_value_text(std::string* value_text) {
  if (value_text != nullptr) {
    
  } else {
    
  }
  _impl_.value_text_.SetAllocated(value_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_text_.IsDefault()) {
    _impl_.value_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brain.FilterPredicate.value_text)
}

// double value_num = 4;
inline void FilterPredicate::clear_value_num() {
  _impl_.value_num_ = 0;
}
inline double FilterPredicate::_internal_value_num() const {
  return _impl_.value_num_;
}
inline double FilterPredicate::value_num() const {
  // @@protoc_insertion_point(field_get:brain.FilterPredicate.value_num)
  return _internal_value_num();
}
inline void FilterPredicate::_internal_set_value_num(double value) {
  
  _impl_.value_num_ = value;
}
inline void FilterPredicate::set_value_num(double value) {
  _internal_set_value_num(value);
  // @@protoc_insertion_point(field_set:brain.FilterPredicate.value_num)
}

// -------------------------------------------------------------------

// RecallResp

// repeated int64 ids = 1;
inline int RecallResp::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int RecallResp::ids_size() const {
  return _internal_ids_size();
}
inline void RecallResp::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t RecallResp::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t RecallResp::ids(int index) const {
  // @@protoc_insertion_point(field_get:brain.RecallResp.ids)
  return _internal_ids(index);
}
inline void RecallResp::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.RecallResp.ids)
}
inline void RecallResp::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void RecallResp::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:brain.RecallResp.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RecallResp::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RecallResp::ids() const {
  // @@protoc_insertion_point(field_list:brain.RecallResp.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RecallResp::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RecallResp::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:brain.RecallResp.ids)
  return _internal_mutable_ids();
}

// repeated float distances = 2;
inline int RecallResp::_internal_distances_size() const {
  return _impl_.distances_.size();
}
inline int RecallResp::distances_size() const {
  return _internal_distances_size();
}
inline void RecallResp::clear_distances() {
  _impl_.distances_.Clear();
}
inline float RecallResp::_internal_distances(int index) const {
  return _impl_.distances_.Get(index);
}
inline float RecallResp::distances(int index) const {
  // @@protoc_insertion_point(field_get:brain.RecallResp.distances)
  return _internal_distances(index);
}
inline void RecallResp::set_distances(int index, float value) {
  _impl_.distances_.Set(index, value);
  // @@protoc_insertion_point(field_set:brain.RecallResp.distances)
}
inline void RecallResp::_internal_add_distances(float value) {
  _impl_.distances_.Add(value);
}
inline void RecallResp::add_distances(float value) {
  _internal_add_distances(value);
  // @@protoc_insertion_point(field_add:brain.RecallResp.distances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecallResp::_internal_distances() const {
  return _impl_.distances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecallResp::distances() const {
  // @@protoc_insertion_point(field_list:brain.RecallResp.distances)
  return _internal_distances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecallResp::_internal_mutable_distances() {
  return &_impl_.distances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecallResp::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:brain.RecallResp.distances)
  return _internal_mutable_distances();
}

// -------------------------------------------------------------------

// MemoryStats

// int64 total_items = 1;
inline void MemoryStats::clear_total_items() {
  _impl_.total_items_ = int64_t{0};
}
inline int64_t MemoryStats::_internal_total_items() const {
  return _impl_.total_items_;
}
inline int64_t MemoryStats::total_items() const {
  // @@protoc_insertion_point(field_get:brain.MemoryStats.total_items)
  return _internal_total_items();
}
inline void MemoryStats::_internal_set_total_items(int64_t value) {
  
  _impl_.total_items_ = value;
}
inline void MemoryStats::set_total_items(int64_t value) {
  _internal_set_total_items(value);
  // @@protoc_insertion_point(field_set:brain.MemoryStats.total_items)
}

// int64 hot_items = 2;
inline void MemoryStats::clear_hot_items() {
  _impl_.hot_items_ = int64_t{0};
}
inline int64_t MemoryStats::_internal_hot_items() const {
  return _impl_.hot_items_;
}
inline int64_t MemoryStats::hot_items() const {
  // @@protoc_insertion_point(field_get:brain.MemoryStats.hot_items)
  return _internal_hot_items();
}
inline void MemoryStats::_internal_set_hot_items(int64_t value) {
  
  _impl_.hot_items_ = value;
}
inline void MemoryStats::set_hot_items(int64_t value) {
  _internal_set_hot_items(value);
  // @@protoc_insertion_point(field_set:brain.MemoryStats.hot_items)
}

// int64 warm_items = 3;
inline void MemoryStats::clear_warm_items() {
  _impl_.warm_items_ = int64_t{0};
}
inline int64_t MemoryStats::_internal_warm_items() const {
  return _impl_.warm_items_;
}
inline int64_t MemoryStats::warm_items() const {
  // @@protoc_insertion_point(field_get:brain.MemoryStats.warm_items)
  return _internal_warm_items();
}
inline void MemoryStats::_internal_set_warm_items(int64_t value) {
  
  _impl_.warm_items_ = value;
}
inline void MemoryStats::set_warm_items(int64_t value) {
  _internal_set_warm_items(value);
  // @@protoc_insertion_point(field_set:brain.MemoryStats.warm_items)
}

// int64 cold_items = 4;
inline void MemoryStats::clear_cold_items() {
  _impl_.cold_items_ = int64_t{0};
}
inline int64_t MemoryStats::_internal_cold_items() const {
  return _impl_.cold_items_;
}
inline int64_t MemoryStats::cold_items() const {
  // @@protoc_insertion_point(field_get:brain.MemoryStats.cold_items)
  return _internal_cold_items();
}
inline void MemoryStats::_internal_set_cold_items(int64_t value) {
  
  _impl_.cold_items_ = value;
}
inline void MemoryStats::set_cold_items(int64_t value) {
  _internal_set_cold_items(value);
  // @@protoc_insertion_point(field_set:brain.MemoryStats.cold_items)
}

// -------------------------------------------------------------------

// GraphStats

// int64 nodes = 1;
inline void GraphStats::clear_nodes() {
  _impl_.nodes_ = int64_t{0};
}
inline int64_t GraphStats::_internal_nodes() const {
  return _impl_.nodes_;
}
inline int64_t GraphStats::nodes() const {
  // @@protoc_insertion_point(field_get:brain.GraphStats.nodes)
  return _internal_nodes();
}
inline void GraphStats::_internal_set_nodes(int64_t value) {
  
  _impl_.nodes_ = value;
}
inline void GraphStats::set_nodes(int64_t value) {
  _internal_set_nodes(value);
  // @@protoc_insertion_point(field_set:brain.GraphStats.nodes)
}

// int64 edges = 2;
inline void GraphStats::clear_edges() {
  _impl_.edges_ = int64_t{0};
}
inline int64_t GraphStats::_internal_edges() const {
  return _impl_.edges_;
}
inline int64_t GraphStats::edges() const {
  // @@protoc_insertion_point(field_get:brain.GraphStats.edges)
  return _internal_edges();
}
inline void GraphStats::_internal_set_edges(int64_t value) {
  
  _impl_.edges_ = value;
}
inline void GraphStats::set_edges(int64_t value) {
  _internal_set_edges(value);
  // @@protoc_insertion_point(field_set:brain.GraphStats.edges)
}

// double avg_degree = 3;
inline void GraphStats::clear_avg_degree() {
  _impl_.avg_degree_ = 0;
}
inline double GraphStats::_internal_avg_degree() const {
  return _impl_.avg_degree_;
}
inline double GraphStats::avg_degree() const {
  // @@protoc_insertion_point(field_get:brain.GraphStats.avg_degree)
  return _internal_avg_degree();
}
inline void GraphStats::_internal_set_avg_degree(double value) {
  
  _impl_.avg_degree_ = value;
}
inline void GraphStats::set_avg_degree(double value) {
  _internal_set_avg_degree(value);
  // @@protoc_insertion_point(field_set:brain.GraphStats.avg_degree)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace brain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brain_2eproto
