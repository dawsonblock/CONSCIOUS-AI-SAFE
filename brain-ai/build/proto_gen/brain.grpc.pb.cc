// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: brain.proto

#include "brain.pb.h"
#include "brain.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace brain {

static const char* Brain_method_names[] = {
  "/brain.Brain/Step",
  "/brain.Brain/GetStats",
  "/brain.Brain/Embed",
  "/brain.Brain/Upsert",
  "/brain.Brain/Recall",
  "/brain.Brain/HealthCheck",
};

std::unique_ptr< Brain::Stub> Brain::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Brain::Stub> stub(new Brain::Stub(channel, options));
  return stub;
}

Brain::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Step_(Brain_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStats_(Brain_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Embed_(Brain_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Upsert_(Brain_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recall_(Brain_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(Brain_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Brain::Stub::Step(::grpc::ClientContext* context, const ::brain::StepReq& request, ::brain::StepResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brain::StepReq, ::brain::StepResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Step_, context, request, response);
}

void Brain::Stub::async::Step(::grpc::ClientContext* context, const ::brain::StepReq* request, ::brain::StepResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brain::StepReq, ::brain::StepResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void Brain::Stub::async::Step(::grpc::ClientContext* context, const ::brain::StepReq* request, ::brain::StepResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brain::StepResp>* Brain::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brain::StepResp, ::brain::StepReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Step_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brain::StepResp>* Brain::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Brain::Stub::GetStats(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::brain::StatsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brain::StatsReq, ::brain::StatsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStats_, context, request, response);
}

void Brain::Stub::async::GetStats(::grpc::ClientContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brain::StatsReq, ::brain::StatsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStats_, context, request, response, std::move(f));
}

void Brain::Stub::async::GetStats(::grpc::ClientContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brain::StatsResp>* Brain::Stub::PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brain::StatsResp, ::brain::StatsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brain::StatsResp>* Brain::Stub::AsyncGetStatsRaw(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Brain::Stub::Embed(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::brain::EmbedResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brain::EmbedReq, ::brain::EmbedResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Embed_, context, request, response);
}

void Brain::Stub::async::Embed(::grpc::ClientContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brain::EmbedReq, ::brain::EmbedResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Embed_, context, request, response, std::move(f));
}

void Brain::Stub::async::Embed(::grpc::ClientContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Embed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>* Brain::Stub::PrepareAsyncEmbedRaw(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brain::EmbedResp, ::brain::EmbedReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Embed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>* Brain::Stub::AsyncEmbedRaw(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEmbedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Brain::Stub::Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::brain::UpsertResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brain::UpsertReq, ::brain::UpsertResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Upsert_, context, request, response);
}

void Brain::Stub::async::Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brain::UpsertReq, ::brain::UpsertResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upsert_, context, request, response, std::move(f));
}

void Brain::Stub::async::Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upsert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>* Brain::Stub::PrepareAsyncUpsertRaw(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brain::UpsertResp, ::brain::UpsertReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Upsert_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>* Brain::Stub::AsyncUpsertRaw(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpsertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Brain::Stub::Recall(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::brain::RecallResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brain::RecallReq, ::brain::RecallResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Recall_, context, request, response);
}

void Brain::Stub::async::Recall(::grpc::ClientContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brain::RecallReq, ::brain::RecallResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recall_, context, request, response, std::move(f));
}

void Brain::Stub::async::Recall(::grpc::ClientContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brain::RecallResp>* Brain::Stub::PrepareAsyncRecallRaw(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brain::RecallResp, ::brain::RecallReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Recall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brain::RecallResp>* Brain::Stub::AsyncRecallRaw(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Brain::Stub::HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::brain::HealthResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brain::HealthReq, ::brain::HealthResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void Brain::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brain::HealthReq, ::brain::HealthResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void Brain::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brain::HealthResp>* Brain::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brain::HealthResp, ::brain::HealthReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brain::HealthResp>* Brain::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

Brain::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Brain_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Brain::Service, ::brain::StepReq, ::brain::StepResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Brain::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brain::StepReq* req,
             ::brain::StepResp* resp) {
               return service->Step(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Brain_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Brain::Service, ::brain::StatsReq, ::brain::StatsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Brain::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brain::StatsReq* req,
             ::brain::StatsResp* resp) {
               return service->GetStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Brain_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Brain::Service, ::brain::EmbedReq, ::brain::EmbedResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Brain::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brain::EmbedReq* req,
             ::brain::EmbedResp* resp) {
               return service->Embed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Brain_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Brain::Service, ::brain::UpsertReq, ::brain::UpsertResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Brain::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brain::UpsertReq* req,
             ::brain::UpsertResp* resp) {
               return service->Upsert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Brain_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Brain::Service, ::brain::RecallReq, ::brain::RecallResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Brain::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brain::RecallReq* req,
             ::brain::RecallResp* resp) {
               return service->Recall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Brain_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Brain::Service, ::brain::HealthReq, ::brain::HealthResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Brain::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brain::HealthReq* req,
             ::brain::HealthResp* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

Brain::Service::~Service() {
}

::grpc::Status Brain::Service::Step(::grpc::ServerContext* context, const ::brain::StepReq* request, ::brain::StepResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Brain::Service::GetStats(::grpc::ServerContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Brain::Service::Embed(::grpc::ServerContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Brain::Service::Upsert(::grpc::ServerContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Brain::Service::Recall(::grpc::ServerContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Brain::Service::HealthCheck(::grpc::ServerContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace brain

