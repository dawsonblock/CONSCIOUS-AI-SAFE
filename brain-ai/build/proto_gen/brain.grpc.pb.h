// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: brain.proto
#ifndef GRPC_brain_2eproto__INCLUDED
#define GRPC_brain_2eproto__INCLUDED

#include "brain.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace brain {

class Brain final {
 public:
  static constexpr char const* service_full_name() {
    return "brain.Brain";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::brain::StepReq& request, ::brain::StepResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StepResp>> AsyncStep(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StepResp>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StepResp>> PrepareAsyncStep(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StepResp>>(PrepareAsyncStepRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStats(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::brain::StatsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StatsResp>> AsyncGetStats(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StatsResp>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StatsResp>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::StatsResp>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status Embed(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::brain::EmbedResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::EmbedResp>> AsyncEmbed(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::EmbedResp>>(AsyncEmbedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::EmbedResp>> PrepareAsyncEmbed(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::EmbedResp>>(PrepareAsyncEmbedRaw(context, request, cq));
    }
    virtual ::grpc::Status Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::brain::UpsertResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::UpsertResp>> AsyncUpsert(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::UpsertResp>>(AsyncUpsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::UpsertResp>> PrepareAsyncUpsert(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::UpsertResp>>(PrepareAsyncUpsertRaw(context, request, cq));
    }
    virtual ::grpc::Status Recall(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::brain::RecallResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::RecallResp>> AsyncRecall(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::RecallResp>>(AsyncRecallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::RecallResp>> PrepareAsyncRecall(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::RecallResp>>(PrepareAsyncRecallRaw(context, request, cq));
    }
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::brain::HealthResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::HealthResp>> AsyncHealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::HealthResp>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::HealthResp>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brain::HealthResp>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Step(::grpc::ClientContext* context, const ::brain::StepReq* request, ::brain::StepResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::brain::StepReq* request, ::brain::StepResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStats(::grpc::ClientContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStats(::grpc::ClientContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Embed(::grpc::ClientContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Embed(::grpc::ClientContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Recall(::grpc::ClientContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Recall(::grpc::ClientContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::StepResp>* AsyncStepRaw(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::StepResp>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::StatsResp>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::StatsResp>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::EmbedResp>* AsyncEmbedRaw(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::EmbedResp>* PrepareAsyncEmbedRaw(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::UpsertResp>* AsyncUpsertRaw(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::UpsertResp>* PrepareAsyncUpsertRaw(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::RecallResp>* AsyncRecallRaw(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::RecallResp>* PrepareAsyncRecallRaw(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::HealthResp>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brain::HealthResp>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Step(::grpc::ClientContext* context, const ::brain::StepReq& request, ::brain::StepResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StepResp>> AsyncStep(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StepResp>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StepResp>> PrepareAsyncStep(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StepResp>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status GetStats(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::brain::StatsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StatsResp>> AsyncGetStats(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StatsResp>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StatsResp>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::StatsResp>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    ::grpc::Status Embed(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::brain::EmbedResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>> AsyncEmbed(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>>(AsyncEmbedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>> PrepareAsyncEmbed(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>>(PrepareAsyncEmbedRaw(context, request, cq));
    }
    ::grpc::Status Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::brain::UpsertResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>> AsyncUpsert(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>>(AsyncUpsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>> PrepareAsyncUpsert(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>>(PrepareAsyncUpsertRaw(context, request, cq));
    }
    ::grpc::Status Recall(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::brain::RecallResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::RecallResp>> AsyncRecall(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::RecallResp>>(AsyncRecallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::RecallResp>> PrepareAsyncRecall(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::RecallResp>>(PrepareAsyncRecallRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::brain::HealthResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::HealthResp>> AsyncHealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::HealthResp>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::HealthResp>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brain::HealthResp>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Step(::grpc::ClientContext* context, const ::brain::StepReq* request, ::brain::StepResp* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::brain::StepReq* request, ::brain::StepResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStats(::grpc::ClientContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response, std::function<void(::grpc::Status)>) override;
      void GetStats(::grpc::ClientContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Embed(::grpc::ClientContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response, std::function<void(::grpc::Status)>) override;
      void Embed(::grpc::ClientContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response, std::function<void(::grpc::Status)>) override;
      void Upsert(::grpc::ClientContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Recall(::grpc::ClientContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response, std::function<void(::grpc::Status)>) override;
      void Recall(::grpc::ClientContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::brain::StepResp>* AsyncStepRaw(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::StepResp>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::brain::StepReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::StatsResp>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::StatsResp>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::brain::StatsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>* AsyncEmbedRaw(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::EmbedResp>* PrepareAsyncEmbedRaw(::grpc::ClientContext* context, const ::brain::EmbedReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>* AsyncUpsertRaw(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::UpsertResp>* PrepareAsyncUpsertRaw(::grpc::ClientContext* context, const ::brain::UpsertReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::RecallResp>* AsyncRecallRaw(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::RecallResp>* PrepareAsyncRecallRaw(::grpc::ClientContext* context, const ::brain::RecallReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::HealthResp>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brain::HealthResp>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::brain::HealthReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStats_;
    const ::grpc::internal::RpcMethod rpcmethod_Embed_;
    const ::grpc::internal::RpcMethod rpcmethod_Upsert_;
    const ::grpc::internal::RpcMethod rpcmethod_Recall_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::brain::StepReq* request, ::brain::StepResp* response);
    virtual ::grpc::Status GetStats(::grpc::ServerContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response);
    virtual ::grpc::Status Embed(::grpc::ServerContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response);
    virtual ::grpc::Status Upsert(::grpc::ServerContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response);
    virtual ::grpc::Status Recall(::grpc::ServerContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response);
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::brain::StepReq* /*request*/, ::brain::StepResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::brain::StepReq* request, ::grpc::ServerAsyncResponseWriter< ::brain::StepResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStats() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::brain::StatsReq* /*request*/, ::brain::StatsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::brain::StatsReq* request, ::grpc::ServerAsyncResponseWriter< ::brain::StatsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Embed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Embed() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Embed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Embed(::grpc::ServerContext* /*context*/, const ::brain::EmbedReq* /*request*/, ::brain::EmbedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEmbed(::grpc::ServerContext* context, ::brain::EmbedReq* request, ::grpc::ServerAsyncResponseWriter< ::brain::EmbedResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Upsert() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::brain::UpsertReq* /*request*/, ::brain::UpsertResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsert(::grpc::ServerContext* context, ::brain::UpsertReq* request, ::grpc::ServerAsyncResponseWriter< ::brain::UpsertResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Recall() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::brain::RecallReq* /*request*/, ::brain::RecallResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecall(::grpc::ServerContext* context, ::brain::RecallReq* request, ::grpc::ServerAsyncResponseWriter< ::brain::RecallResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::brain::HealthReq* /*request*/, ::brain::HealthResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::brain::HealthReq* request, ::grpc::ServerAsyncResponseWriter< ::brain::HealthResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Step<WithAsyncMethod_GetStats<WithAsyncMethod_Embed<WithAsyncMethod_Upsert<WithAsyncMethod_Recall<WithAsyncMethod_HealthCheck<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Step() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::brain::StepReq, ::brain::StepResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brain::StepReq* request, ::brain::StepResp* response) { return this->Step(context, request, response); }));}
    void SetMessageAllocatorFor_Step(
        ::grpc::MessageAllocator< ::brain::StepReq, ::brain::StepResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brain::StepReq, ::brain::StepResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::brain::StepReq* /*request*/, ::brain::StepResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::brain::StepReq* /*request*/, ::brain::StepResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStats() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::brain::StatsReq, ::brain::StatsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brain::StatsReq* request, ::brain::StatsResp* response) { return this->GetStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetStats(
        ::grpc::MessageAllocator< ::brain::StatsReq, ::brain::StatsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brain::StatsReq, ::brain::StatsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::brain::StatsReq* /*request*/, ::brain::StatsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::brain::StatsReq* /*request*/, ::brain::StatsResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Embed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Embed() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::brain::EmbedReq, ::brain::EmbedResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brain::EmbedReq* request, ::brain::EmbedResp* response) { return this->Embed(context, request, response); }));}
    void SetMessageAllocatorFor_Embed(
        ::grpc::MessageAllocator< ::brain::EmbedReq, ::brain::EmbedResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brain::EmbedReq, ::brain::EmbedResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Embed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Embed(::grpc::ServerContext* /*context*/, const ::brain::EmbedReq* /*request*/, ::brain::EmbedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Embed(
      ::grpc::CallbackServerContext* /*context*/, const ::brain::EmbedReq* /*request*/, ::brain::EmbedResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Upsert() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::brain::UpsertReq, ::brain::UpsertResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brain::UpsertReq* request, ::brain::UpsertResp* response) { return this->Upsert(context, request, response); }));}
    void SetMessageAllocatorFor_Upsert(
        ::grpc::MessageAllocator< ::brain::UpsertReq, ::brain::UpsertResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brain::UpsertReq, ::brain::UpsertResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::brain::UpsertReq* /*request*/, ::brain::UpsertResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Upsert(
      ::grpc::CallbackServerContext* /*context*/, const ::brain::UpsertReq* /*request*/, ::brain::UpsertResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Recall() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::brain::RecallReq, ::brain::RecallResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brain::RecallReq* request, ::brain::RecallResp* response) { return this->Recall(context, request, response); }));}
    void SetMessageAllocatorFor_Recall(
        ::grpc::MessageAllocator< ::brain::RecallReq, ::brain::RecallResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brain::RecallReq, ::brain::RecallResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::brain::RecallReq* /*request*/, ::brain::RecallResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Recall(
      ::grpc::CallbackServerContext* /*context*/, const ::brain::RecallReq* /*request*/, ::brain::RecallResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::brain::HealthReq, ::brain::HealthResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brain::HealthReq* request, ::brain::HealthResp* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::brain::HealthReq, ::brain::HealthResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brain::HealthReq, ::brain::HealthResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::brain::HealthReq* /*request*/, ::brain::HealthResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::brain::HealthReq* /*request*/, ::brain::HealthResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Step<WithCallbackMethod_GetStats<WithCallbackMethod_Embed<WithCallbackMethod_Upsert<WithCallbackMethod_Recall<WithCallbackMethod_HealthCheck<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::brain::StepReq* /*request*/, ::brain::StepResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStats() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::brain::StatsReq* /*request*/, ::brain::StatsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Embed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Embed() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Embed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Embed(::grpc::ServerContext* /*context*/, const ::brain::EmbedReq* /*request*/, ::brain::EmbedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Upsert() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::brain::UpsertReq* /*request*/, ::brain::UpsertResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Recall() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::brain::RecallReq* /*request*/, ::brain::RecallResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::brain::HealthReq* /*request*/, ::brain::HealthResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::brain::StepReq* /*request*/, ::brain::StepResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStats() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::brain::StatsReq* /*request*/, ::brain::StatsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Embed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Embed() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Embed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Embed(::grpc::ServerContext* /*context*/, const ::brain::EmbedReq* /*request*/, ::brain::EmbedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEmbed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Upsert() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::brain::UpsertReq* /*request*/, ::brain::UpsertResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Recall() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::brain::RecallReq* /*request*/, ::brain::RecallResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::brain::HealthReq* /*request*/, ::brain::HealthResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Step() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Step(context, request, response); }));
    }
    ~WithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::brain::StepReq* /*request*/, ::brain::StepResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStats() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::brain::StatsReq* /*request*/, ::brain::StatsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Embed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Embed() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Embed(context, request, response); }));
    }
    ~WithRawCallbackMethod_Embed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Embed(::grpc::ServerContext* /*context*/, const ::brain::EmbedReq* /*request*/, ::brain::EmbedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Embed(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Upsert() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Upsert(context, request, response); }));
    }
    ~WithRawCallbackMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::brain::UpsertReq* /*request*/, ::brain::UpsertResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Upsert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Recall() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Recall(context, request, response); }));
    }
    ~WithRawCallbackMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::brain::RecallReq* /*request*/, ::brain::RecallResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Recall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::brain::HealthReq* /*request*/, ::brain::HealthResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brain::StepReq, ::brain::StepResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brain::StepReq, ::brain::StepResp>* streamer) {
                       return this->StreamedStep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::brain::StepReq* /*request*/, ::brain::StepResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brain::StepReq,::brain::StepResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStats() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brain::StatsReq, ::brain::StatsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brain::StatsReq, ::brain::StatsResp>* streamer) {
                       return this->StreamedGetStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::brain::StatsReq* /*request*/, ::brain::StatsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brain::StatsReq,::brain::StatsResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Embed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Embed() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brain::EmbedReq, ::brain::EmbedResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brain::EmbedReq, ::brain::EmbedResp>* streamer) {
                       return this->StreamedEmbed(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Embed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Embed(::grpc::ServerContext* /*context*/, const ::brain::EmbedReq* /*request*/, ::brain::EmbedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEmbed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brain::EmbedReq,::brain::EmbedResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Upsert() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brain::UpsertReq, ::brain::UpsertResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brain::UpsertReq, ::brain::UpsertResp>* streamer) {
                       return this->StreamedUpsert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::brain::UpsertReq* /*request*/, ::brain::UpsertResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brain::UpsertReq,::brain::UpsertResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Recall() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brain::RecallReq, ::brain::RecallResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brain::RecallReq, ::brain::RecallResp>* streamer) {
                       return this->StreamedRecall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::brain::RecallReq* /*request*/, ::brain::RecallResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brain::RecallReq,::brain::RecallResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brain::HealthReq, ::brain::HealthResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brain::HealthReq, ::brain::HealthResp>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::brain::HealthReq* /*request*/, ::brain::HealthResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brain::HealthReq,::brain::HealthResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_GetStats<WithStreamedUnaryMethod_Embed<WithStreamedUnaryMethod_Upsert<WithStreamedUnaryMethod_Recall<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_GetStats<WithStreamedUnaryMethod_Embed<WithStreamedUnaryMethod_Upsert<WithStreamedUnaryMethod_Recall<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > StreamedService;
};

}  // namespace brain


#endif  // GRPC_brain_2eproto__INCLUDED
