# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import brain_pb2 as brain__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in brain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BrainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Step = channel.unary_unary(
                '/brain.Brain/Step',
                request_serializer=brain__pb2.StepReq.SerializeToString,
                response_deserializer=brain__pb2.StepResp.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/brain.Brain/GetStats',
                request_serializer=brain__pb2.StatsReq.SerializeToString,
                response_deserializer=brain__pb2.StatsResp.FromString,
                _registered_method=True)
        self.Embed = channel.unary_unary(
                '/brain.Brain/Embed',
                request_serializer=brain__pb2.EmbedReq.SerializeToString,
                response_deserializer=brain__pb2.EmbedResp.FromString,
                _registered_method=True)
        self.Upsert = channel.unary_unary(
                '/brain.Brain/Upsert',
                request_serializer=brain__pb2.UpsertReq.SerializeToString,
                response_deserializer=brain__pb2.UpsertResp.FromString,
                _registered_method=True)
        self.Recall = channel.unary_unary(
                '/brain.Brain/Recall',
                request_serializer=brain__pb2.RecallReq.SerializeToString,
                response_deserializer=brain__pb2.RecallResp.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/brain.Brain/HealthCheck',
                request_serializer=brain__pb2.HealthReq.SerializeToString,
                response_deserializer=brain__pb2.HealthResp.FromString,
                _registered_method=True)


class BrainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Step(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Embed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upsert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Step': grpc.unary_unary_rpc_method_handler(
                    servicer.Step,
                    request_deserializer=brain__pb2.StepReq.FromString,
                    response_serializer=brain__pb2.StepResp.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=brain__pb2.StatsReq.FromString,
                    response_serializer=brain__pb2.StatsResp.SerializeToString,
            ),
            'Embed': grpc.unary_unary_rpc_method_handler(
                    servicer.Embed,
                    request_deserializer=brain__pb2.EmbedReq.FromString,
                    response_serializer=brain__pb2.EmbedResp.SerializeToString,
            ),
            'Upsert': grpc.unary_unary_rpc_method_handler(
                    servicer.Upsert,
                    request_deserializer=brain__pb2.UpsertReq.FromString,
                    response_serializer=brain__pb2.UpsertResp.SerializeToString,
            ),
            'Recall': grpc.unary_unary_rpc_method_handler(
                    servicer.Recall,
                    request_deserializer=brain__pb2.RecallReq.FromString,
                    response_serializer=brain__pb2.RecallResp.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=brain__pb2.HealthReq.FromString,
                    response_serializer=brain__pb2.HealthResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'brain.Brain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('brain.Brain', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Brain(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/brain.Brain/Step',
            brain__pb2.StepReq.SerializeToString,
            brain__pb2.StepResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/brain.Brain/GetStats',
            brain__pb2.StatsReq.SerializeToString,
            brain__pb2.StatsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Embed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/brain.Brain/Embed',
            brain__pb2.EmbedReq.SerializeToString,
            brain__pb2.EmbedResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Upsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/brain.Brain/Upsert',
            brain__pb2.UpsertReq.SerializeToString,
            brain__pb2.UpsertResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Recall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/brain.Brain/Recall',
            brain__pb2.RecallReq.SerializeToString,
            brain__pb2.RecallResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/brain.Brain/HealthCheck',
            brain__pb2.HealthReq.SerializeToString,
            brain__pb2.HealthResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
