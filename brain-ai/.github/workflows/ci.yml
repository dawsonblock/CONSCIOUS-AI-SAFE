name: Brain-AI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential cmake ninja-build pkg-config g++ \
          libeigen3-dev libprotobuf-dev protobuf-compiler \
          protobuf-compiler-grpc libgrpc++-dev \
          libssl-dev libsqlite3-dev libyaml-cpp-dev \
          libopenblas-dev liblapack-dev libmicrohttpd-dev \
          nlohmann-json3-dev
    
    - name: Install FAISS
      run: |
        git clone --depth 1 https://github.com/facebookresearch/faiss.git /tmp/faiss
        cd /tmp/faiss
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
              -DFAISS_ENABLE_GPU=OFF -DFAISS_ENABLE_PYTHON=OFF \
              -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=ON \
              -DBLA_VENDOR=OpenBLAS
        cmake --build build -j$(nproc)
        sudo cmake --install build
        sudo ldconfig
    
    - name: Install HNSWlib
      run: |
        git clone --depth 1 https://github.com/nmslib/hnswlib.git /tmp/hnswlib
        sudo mkdir -p /usr/local/include/hnswlib
        sudo cp /tmp/hnswlib/hnswlib/*.h /usr/local/include/hnswlib/
    
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    
    - name: Build
      run: cmake --build build -j$(nproc)
    
    - name: Run Unit Tests
      run: cd build && ctest --output-on-failure
    
    - name: Run Performance Benchmarks
      run: |
        cd build
        echo "=== Evolution Benchmark ==="
        ./bench_evolution 1000 > /tmp/bench_evolution.log
        cat /tmp/bench_evolution.log
        
        # Check if evolution meets target
        if grep -q "Status: ✅ PASS" /tmp/bench_evolution.log; then
          echo "✅ Evolution benchmark PASSED"
        else
          echo "❌ Evolution benchmark FAILED"
          exit 1
        fi
    
    - name: Validate README Compliance
      run: |
        echo "Checking README compliance..."
        
        # Check for required sections
        if ! grep -q "Performance Targets" README.md; then
          echo "❌ Missing 'Performance Targets' section"
          exit 1
        fi
        
        if ! grep -q "Quick Start" README.md; then
          echo "❌ Missing 'Quick Start' section"
          exit 1
        fi
        
        echo "✅ README compliance checks passed"
    
    - name: Security Scan
      run: |
        # Check for hardcoded secrets
        if grep -r "password\|secret\|api_key" --include="*.cpp" --include="*.hpp" .; then
          echo "⚠️  Potential hardcoded secrets found"
        fi
        
        # Check seccomp profile exists
        if [ ! -f configs/seccomp.json ]; then
          echo "❌ Missing seccomp.json"
          exit 1
        fi
        
        echo "✅ Security checks passed"
    
    - name: Generate Compliance Report
      run: |
        echo "# CI/CD Run Report" > compliance_report.md
        echo "" >> compliance_report.md
        echo "**Date**: $(date)" >> compliance_report.md
        echo "**Commit**: ${{ github.sha }}" >> compliance_report.md
        echo "" >> compliance_report.md
        echo "## Test Results" >> compliance_report.md
        echo "- ✅ Build: PASSED" >> compliance_report.md
        echo "- ✅ Unit Tests: PASSED" >> compliance_report.md
        echo "- ✅ Benchmarks: PASSED" >> compliance_report.md
        echo "- ✅ README Compliance: PASSED" >> compliance_report.md
        echo "- ✅ Security: PASSED" >> compliance_report.md
        cat compliance_report.md
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          build/brain_server
          build/bench_evolution
          build/bench_recall
          compliance_report.md

  docker-build:
    runs-on: ubuntu-22.04
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker Image
      run: |
        docker build -t brain-ai:${{ github.sha }} -f docker/Dockerfile .
    
    - name: Test Docker Image
      run: |
        docker run --rm brain-ai:${{ github.sha }} --help || true
        echo "✅ Docker image built successfully"
